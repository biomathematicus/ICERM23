import  numpy as np
import  csv
from    itertools import compress
import  numbers as nbr
import  re
# Function generated by ChatGPT
def funCSVCol(sFile, sColumn):
    with open(sFile, 'r', encoding='cp1252') as file:
        reader = csv.DictReader(file)
        if sColumn in reader.fieldnames:
            return [row[sColumn] for row in reader]
        else:
            return None


# Function generated by ChatGPT
def extract_columns(csv_file, column_names, numeric_columns):
    data = []
    with open(csv_file, 'r', encoding='cp1252') as file:
        reader = csv.DictReader(file)
        for row in reader:
            extracted_row = []
            for column_name in column_names:
                if column_name in numeric_columns:
                    extracted_row.append(float(row[column_name]))
                else:
                    extracted_row.append(row[column_name])
            data.append(extracted_row)
    return data
       

# Find the position of a word in a list
def funWordPos(sWord, cList):
    i = -1
    for sItem in cList:
        i += 1 
        if sItem == sWord:
            return i
    return i


# Load a CVS line and prepare a list
def funStr2Lst(s):
    # Exceptions found in files:
    s = s.replace(', ', '')
    s = re.sub(r'([A-Za-z.]),', '\1', s)
    
    s = s.replace('"', '')
    s = s.rstrip('\n')
    l = s.split(',')   
    return l


# Extract a column from a CSV file
def funColumn(nCol, bNum, sFile):
    out = []
    with open(sFile, encoding='cp1252') as oFile:
        next(oFile)
        for s in oFile:
            r = s.rstrip('\n')
            if r != '':
                l = funStr2Lst(r) 
                out.append(l[nCol])   
    if bNum: 
        out = [int(x) for x in out]
    return out    


# Extarct the header form a CSV file
def funHeader(sFile):
    f = open(sFile, "r", encoding='cp1252')
    cHeader = funStr2Lst(f.read())
    f.close()
    return cHeader


# Create a list of columns form a CSV file
def funFile2Lst(cVar, cType, sFile):
    out = []
    cHeader = funHeader(sFile)
    i = 0
    for s in cVar:
        n = funWordPos(s, cHeader)
        cCol = funColumn(n,cType[i],sFile)
        out.append(cCol)
        i += 1
    return out


# Get a subset form a list given an index
def funGetSublist(idx, cList):
    pos = list(compress(range(len(idx)), idx))
    out = []
    for n in pos:
        out.append(cList[n])
    return out

# Create a data dicitonary for a file and fields
def funDict(cKey,cVal):
    dOut = {}
    iMissing = 0
    for (k,v) in zip(cKey,cVal):
        if v < 0:
            iMissing += 1
            continue
        if k in dOut.keys():
            dOut[k] += v
        else:
            dOut[k] = v
    return dOut, iMissing
